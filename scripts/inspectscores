#!/usr/bin/env python

import argparse
import sqlite3
import numpy as np
from datasets import Dataset
from pprint import pprint

from IPython.terminal.embed import InteractiveShellEmbed

def main(args):
    pth = args.path
    con = sqlite3.connect(pth)
    cur = con.cursor()
    tables = list(list(zip(*cur.execute(
        'select name from sqlite_master where type="table";'
    ).fetchall()))[0])

    columns = dict()
    for name in tables:
        tbl_info = cur.execute(f"PRAGMA table_info({name});").fetchall()
        _, cols, _, _, _, _ = zip(*tbl_info)
        columns[name] = list(cols)

    keys = columns['scores']

    read_cur = con.cursor()
    metrics = cur.execute(
        'select distinct(metric) from scores'
    ).fetchall()
    metrics = list(zip(*metrics))[0]

    joinstr = ',\n'
    query = (
        f"""
        SELECT S.resp_id, R.model, P.template_name, P.problem_id, P.template_id, P.sys_id, F.problem, F.answer, R.response, S.metric,
            {joinstr.join(f'MAX(CASE WHEN S.metric="{met}" THEN S.score END) AS "{met}"' for met in metrics)}
        FROM scores S
        JOIN responses R on S.resp_id=R.rowid 
        JOIN prompts P on R.prompt_id=P.rowid
        JOIN fitb_problems F on P.problem_id=F.rowid
        JOIN source_data C on F.ref_id=C.rowid
        GROUP BY S.resp_id, R.prompt_id, P.problem_id, F.ref_id, C.rowid
        """
    )
    # data = dict(zip(
    #     ['resp_id', 'problem', 'answer', 'response', 'metric', 'score'], 
    #     zip(*data_cur.fetchall())
    # ))

    # ds = Dataset.from_dict(data)

    keys = [
        'resp_id', 'model', 'template_name', 'problem_id', 
        'template_id', 'sys_id', 'problem', 'answer', 'response', 
        'metric'
    ] + list(metrics)
    data = dict(zip(keys, zip(*cur.execute(query).fetchall())))
    
    ipshell = InteractiveShellEmbed()
    ipshell()
        

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--path', type=str, required=True)
    args = parser.parse_args()
    main(args)