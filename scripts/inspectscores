#!/usr/bin/env python

import os
import argparse
import sqlite3
import numpy as np
from datasets import Dataset
from pprint import pprint
from itertools import product
from tabulate import tabulate
from tqdm import tqdm

from IPython.terminal.embed import InteractiveShellEmbed

def main(args):
    pth = args.path
    con = sqlite3.connect(pth)
    cur = con.cursor()
    tables = list(list(zip(*cur.execute(
        'select name from sqlite_master where type="table";'
    ).fetchall()))[0])
    try:
        views = list(list(zip(*cur.execute(
            'select name from sqlite_master where type="view";'
        ).fetchall()))[0])
    except:
        views = []

    columns = dict()
    for name in tables:
        tbl_info = cur.execute(f"PRAGMA table_info({name});").fetchall()
        _, cols, _, _, _, _ = zip(*tbl_info)
        columns[name] = list(cols)
    for name in views:
        vw_info = cur.execute(f"PRAGMA table_info({name});").fetchall()
        _, cols, _, _, _, _ = zip(*vw_info)
        columns[name] = list(cols)

    metrics, = zip(*cur.execute(
        'select * from metric_names'
    ).fetchall())
    joinstr = '\n'
    query = (
        f"""
        CREATE VIEW IF NOT EXISTS scores AS
        SELECT 
            R.rowid AS resp_id, R.model, R.temperature, P.template_name, 
            P.problem_id, P.template_id, P.sys_id, F.problem, F.answer, 
            P.prompt_text, R.response, 
            {', '.join([f'{met}.score AS {met}' for met in metrics])}
        FROM responses R
        JOIN prompts P on R.prompt_id=P.rowid
        JOIN fitb_problems F on P.problem_id=F.rowid
        JOIN source_data C on F.ref_id=C.rowid
        {joinstr.join([
            f'JOIN {met} on {met}.resp_id=R.rowid' 
            for met in metrics
        ])}
        """
    )
    res = cur.execute(query)

    keys = [
        'resp_id', 'model', 'temperature', 'template_name', 
        'problem_id', 'template_id', 'sys_id', 'problem', 'answer', 
        'prompt_text', 'response', 
    ] + list(metrics)

    out_table = []

    # get some list values
    res = cur.execute('SELECT DISTINCT template_name from scores')
    template_names, = list(zip(*res.fetchall()))
    res = cur.execute('SELECT DISTINCT model from scores')
    model_names, = list(zip(*res.fetchall()))

    model_templates = list(product(template_names, model_names))
    for tmplt, model_name in tqdm(model_templates, position=0):
        # get template ids
        res = cur.execute(
            f"""
            SELECT DISTINCT template_id FROM scores S 
            WHERE S.template_name="{tmplt}"
            """
        )
        tids, = list(zip(*res.fetchall()))

        # get sys_ids
        res = cur.execute(
            f"""
            SELECT DISTINCT sys_id FROM scores S 
            WHERE S.template_name="{tmplt}"
            """
        )
        
        sids, = list(zip(*res.fetchall()))

        # get temperatures
        res = cur.execute(
            f"""
            SELECT DISTINCT temperature FROM scores S 
            WHERE S.template_name="{tmplt}"
            """
        )
        temps, = list(zip(*res.fetchall()))

        combos = list(product(tids, sids, temps))
        for tid, sid, temp in tqdm(combos, position=1, leave=False):
            res = cur.execute(
                f"""
                SELECT {', '.join(keys)} FROM scores S
                WHERE S.template_name="{tmplt}" 
                    AND S.model="{model_name}"
                    AND S.sys_id={sid} 
                    AND S.template_id={tid} 
                    AND S.temperature={temp}
                """
            )
            data = dict(zip(keys, zip(*res.fetchall())))
            data_keys = list(data.keys())
            N = len(data[data_keys[0]])
            out_table.append({
                'model': model_name,
                'temperature': temp,
                'template': tmplt,
                'tid': tid,
                'sid': sid,
                'total': N,
            })
            r1 = data.get('rouge1')
            if r1:
                r1 = np.array(r1)
                out_table[-1].update({
                    'avg rouge': float(np.mean(r1)),
                    'zeros rouge': float(np.sum(r1 == 0)),
                    'pct zeros rouge': float(np.mean(r1 == 0)),
                })
            bs = data.get('bertscore_f1')
            if bs:
                bs = np.array(bs)
                out_table[-1].update({
                    'avg bertscore': float(np.mean(bs)),
                    'zeros bertscore': float(np.sum(bs == 0)),
                    'pct zeros bertscore': float(np.mean(bs == 0)),
                })
    print(tabulate(out_table, headers='keys', tablefmt='github'))

    static_keys = set({
        'model', 'temperature', 'template', 'tid', 'sid', 'total',
    })
    met_keys = set(out_table[0].keys()) - static_keys
    met_cols = list(static_keys) + list(met_keys)
    met_cols = list(map(lambda x: x.replace(' ', '_'), met_cols))
    met_col_names = set(
        {k.replace(' ', '_') + ' double' for k in met_keys}
    )
    col_str = ',\n'.join(met_col_names)
    mcon = sqlite3.connect(':memory:')
    mcur = mcon.cursor()
    mcur.execute(
        f"""
        CREATE TABLE averages (
            model text,
            temperature double,
            template text,
            tid int,
            sid int,
            total int,
            {col_str}
        )
        """
    )
    in_cols = ', '.join([
        k.replace(' ', '_') for k in out_table[0].keys()
    ])
    mcur.executemany(
        f"""
        INSERT INTO averages ({in_cols})
        VALUES (?, ?, ?, ?, ?, ?, {', '.join(['?']*len(met_col_names))})
        """, 
        map(lambda x: tuple(x.values()), out_table)
    )
    mcon.commit()



    out_vars = []
    template_model_names = list(product(template_names, model_names))
    for tmplt, mdl in tqdm(template_model_names, position=0):
        # get tids
        res = cur.execute(
            f"""
            SELECT DISTINCT template_id FROM scores S 
            WHERE S.template_name="{tmplt}" AND S.model="{mdl}"
            """
        )
        tids, = list(zip(*res.fetchall()))

        # get sids
        res = cur.execute(
            f"""
            SELECT DISTINCT sys_id FROM scores S 
            WHERE S.template_name="{tmplt}" AND S.model="{mdl}"
            """
        )
        sids, = list(zip(*res.fetchall()))

        # get temps
        res = cur.execute(
            f"""
            SELECT DISTINCT temperature FROM scores S 
            WHERE S.template_name="{tmplt}"
            """
        )
        temps, = list(zip(*res.fetchall()))

        for tid, temp in product(tids, temps):
            rouge_scores, = zip(*cur.execute(
                f"""
                SELECT rouge1 FROM scores 
                WHERE 
                    template_name="{tmplt}" 
                    AND template_id={tid} 
                    AND temperature={temp}
                """
            ))
            out_vars.append({
                'template': tmplt,
                'temperature': temp,
                'pool_by': f'tid={tid}',
                'avg rouge': float(np.mean(rouge_scores)),
                'rouge var': float(np.var(rouge_scores)),
                'N': len(rouge_scores),
            })
        for sid, temp in product(sids, temps):
            rouge_scores, = zip(*cur.execute(
                f"""
                SELECT rouge1 FROM scores
                WHERE 
                    template_name="{tmplt}" 
                    AND sys_id={sid} 
                    AND temperature={temp}
                """
            ))
            out_vars.append({
                'template': tmplt,
                'temperature': temp,
                'pool_by': f'sid={sid}',
                'avg rouge': float(np.mean(rouge_scores)),
                'rouge var': float(np.var(rouge_scores)),
                'N': len(rouge_scores),
            })
    print(tabulate(out_vars, headers='keys', tablefmt='github'))

    with open(f'{os.path.dirname(pth)}/tables.txt', 'w') as f:
        f.write(tabulate(out_table, headers='keys', tablefmt='github'))
        f.write('\n'*5)
        f.write(tabulate(out_vars, headers='keys', tablefmt='github'))
    
    ipshell = InteractiveShellEmbed()
    ipshell()

def cursor_generator(cursor, keys):
    for row in cursor:
        yield dict(zip(keys, row))
        
def make_ds(cursor, keys):
    return Dataset.from_dict(dict(zip(keys, zip(*cursor.fetchall()))))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--path', type=str, required=True)
    args = parser.parse_args()
    main(args)